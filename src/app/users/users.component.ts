import { HttpClient } from '@angular/common/http';
import { Component, OnInit, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { Router } from '@angular/router';
import jspdf from 'jspdf';
import * as XLSX from 'xlsx';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css']
})
export class UsersComponent implements OnInit {

  pageSizeOptions = [10, 20,50, 100 ];
  pageSize = 10;

  displayedColumns : any [] = ['position','Transaction Time','Transaction ID', 'Amount','Account Number','Kra Pin','Tax Payer','Tax Heads', 'Phone Number', 'Name','Account Balance', "Status"]
  dataSource : MatTableDataSource<any> = new MatTableDataSource();
  mpesaConfirmations : any [] = [];



  @ViewChild(MatPaginator) paginator!: MatPaginator;
  isLoading: boolean;
  headLine: any;
  //  @ViewChild(MatSort) sort!: MatSort ;


  constructor(private router: Router, private http : HttpClient){}

  ngOnInit(): void {


  }


  ngAfterViewInit() {

    this.paginator.lastPage = () =>{

    }

  }



  applyFilter(target: EventTarget | null) {

    let filterValue = (target as HTMLInputElement).value
    filterValue = filterValue.trim(); // Remove whitespace
    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches
    this.dataSource.filter = filterValue;

  }


  exportData(type : string){

      this.isLoading = true

      const date = new Date();
      const day = date.getDate();
      const month = date.getMonth() + 1;
      const year = date.getFullYear();
      const fileType = type == "XLSX" ? ".xlsx" : '.pdf';

      const fileName = this.headLine.replace(" ", "_") + "_"+ day + "_"+
                       month + "_" + year+ fileType;

       let element;




        this.pageSize = this.dataSource.data.length;
        this.paginator._changePageSize(this.pageSize);

        setTimeout(()=>{
          element = document.getElementById('mpesa-conf');
          
          const element2 = this.appendNameAndTimeStamp(element)
          
          if(type == 'XLSX'){
          this.downloadExcel(element2, fileName);
          }else{
            this.downloadPDF("#mpesa-conf", fileName);
          }
        }, 2000)

        
  }

  downloadExcel(element : any, fileName : string){

    const ws: XLSX.WorkSheet =XLSX.utils.table_to_sheet(element);

    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');

    XLSX.writeFile(wb, fileName);

    this.pageSize = 10;
    this.paginator._changePageSize(this.pageSize);

    this.isLoading = false

  }



  downloadPDF(element : any, fileName : string){

    const doc = new jspdf({orientation:"landscape"});

    autoTable(doc, {html : element, headStyles: {fillColor:"#FF0000"}, theme:"grid"})
    doc.save(fileName);

    this.pageSize = 10;
    this.paginator._changePageSize(this.pageSize);

    this.isLoading = false

  }



 

 appendNameAndTimeStamp(element : HTMLElement){

  const mDiv = element.getElementsByClassName("nameDate");

  //if it exists remove it to add new one
  if(mDiv.length == 1){  

    const myDiv = document.getElementsByClassName("nameDate")
    myDiv[0].parentNode.removeChild(myDiv[0])

   }

  element.innerHTML += 
  `<tr class= "nameDate">`+
  `<td colspan = 2> Date :` + new Date() + `</td>` +
  `<td colspan = 2> Generated By : `+ localStorage.getItem("signedUser") + `</td>`+
  `</tr>`

  return element

 }
}
function autoTable(doc: any, arg1: { html: any; headStyles: { fillColor: string; }; theme: string; }) {
  throw new Error('Function not implemented.');
}

